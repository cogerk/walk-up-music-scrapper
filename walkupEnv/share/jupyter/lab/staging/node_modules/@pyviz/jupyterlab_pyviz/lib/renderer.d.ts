import { IRenderMime } from '@jupyterlab/rendermime-interfaces';
import { Kernel, KernelMessage } from '@jupyterlab/services';
import { JSONObject, JSONValue } from '@phosphor/coreutils';
import { Widget } from '@phosphor/widgets';
import { ContextManager } from './manager';
export interface CommProxy {
    open(data?: JSONValue, metadata?: JSONObject, buffers?: (ArrayBuffer | ArrayBufferView)[]): void;
    send(data: JSONValue, metadata?: JSONObject, buffers?: (ArrayBuffer | ArrayBufferView)[], disposeOnDone?: boolean): void;
    onMsg: (msg: KernelMessage.ICommOpenMsg) => void;
}
export interface KernelProxy {
    registerCommTarget(targetName: string, callback: (comm: Kernel.IComm, msg: KernelMessage.ICommOpenMsg) => void): void;
    connectToComm(targetName: string, commId?: string): CommProxy;
}
export declare const HV_LOAD_MIME_TYPE = "application/vnd.holoviews_load.v0+json";
export declare const HV_EXEC_MIME_TYPE = "application/vnd.holoviews_exec.v0+json";
/**
 * Load HVJS and CSS into the DOM
 */
export declare class HVJSLoad extends Widget implements IRenderMime.IRenderer {
    private _load_mimetype;
    private _script_element;
    constructor(options: IRenderMime.IRendererOptions);
    renderModel(model: IRenderMime.IMimeModel): Promise<void>;
}
/**
 * Exec HVJS in window
 */
export declare class HVJSExec extends Widget implements IRenderMime.IRenderer {
    private _html_mimetype;
    private _js_mimetype;
    private _document_id;
    private _exec_mimetype;
    private _script_element;
    private _div_element;
    private _manager;
    private _displayed;
    constructor(options: IRenderMime.IRendererOptions, manager: ContextManager);
    _createNodes(): void;
    readonly isDisposed: boolean;
    renderModel(model: IRenderMime.IMimeModel): Promise<void>;
    _disposePlot(): void;
    dispose(): void;
}
