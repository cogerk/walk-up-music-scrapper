"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_1 = require("@phosphor/widgets");
var widgets_2 = require("./widgets");
var jquery = require("jquery");
/**
 * The MIME types for HoloViews
 */
var HTML_MIME_TYPE = 'text/html';
var JS_MIME_TYPE = 'application/javascript';
exports.HV_LOAD_MIME_TYPE = 'application/vnd.holoviews_load.v0+json';
exports.HV_EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';
/**
 * Load HVJS and CSS into the DOM
 */
var HVJSLoad = /** @class */ (function (_super) {
    __extends(HVJSLoad, _super);
    function HVJSLoad(options) {
        var _this = _super.call(this) || this;
        _this._load_mimetype = exports.HV_LOAD_MIME_TYPE;
        _this._script_element = document.createElement("script");
        window.jQuery = jquery;
        window.$ = jquery;
        return _this;
    }
    HVJSLoad.prototype.renderModel = function (model) {
        var data = model.data[this._load_mimetype];
        this._script_element.textContent = data;
        this.node.appendChild(this._script_element);
        return Promise.resolve();
    };
    return HVJSLoad;
}(widgets_1.Widget));
exports.HVJSLoad = HVJSLoad;
/**
 * Exec HVJS in window
 */
var HVJSExec = /** @class */ (function (_super) {
    __extends(HVJSExec, _super);
    function HVJSExec(options, manager) {
        var _this = _super.call(this) || this;
        // for classic nb compat reasons, the payload in contained in these mime messages
        _this._html_mimetype = HTML_MIME_TYPE;
        _this._js_mimetype = JS_MIME_TYPE;
        _this._exec_mimetype = exports.HV_EXEC_MIME_TYPE;
        _this._createNodes();
        _this._manager = manager;
        _this._displayed = false;
        return _this;
    }
    HVJSExec.prototype._createNodes = function () {
        this._div_element = document.createElement("div");
        this._script_element = document.createElement("script");
        this._script_element.setAttribute('type', 'text/javascript');
    };
    Object.defineProperty(HVJSExec.prototype, "isDisposed", {
        get: function () {
            return this._manager === null;
        },
        enumerable: true,
        configurable: true
    });
    HVJSExec.prototype.renderModel = function (model) {
        var metadata = model.metadata[this._exec_mimetype];
        var id = metadata.id;
        if (this._displayed) {
            this._disposePlot();
            this.node.removeChild(this._div_element);
            this.node.removeChild(this._script_element);
            this._createNodes();
        }
        if (id !== undefined) {
            // I'm a static document
            if (window.HoloViews === undefined) {
                window.HoloViews = { kernels: {} };
            }
            window.HoloViews.init_slider = widgets_2.init_slider;
            window.HoloViews.init_dropdown = widgets_2.init_dropdown;
            var html_data = model.data[this._html_mimetype];
            this._div_element.innerHTML = html_data;
            this.node.appendChild(this._div_element);
            var data = model.data[this._js_mimetype];
            this._script_element.textContent = data;
            this.node.appendChild(this._script_element);
            this._displayed = true;
            var manager_1 = this._manager;
            var kernel_1 = manager_1.context.session.kernel;
            var registerClosure = function (targetName, callback) {
                if (kernel_1 == undefined) {
                    console.log('Kernel not found, could not register comm target ', targetName);
                    return;
                }
                return kernel_1.registerCommTarget(targetName, callback);
            };
            var connectClosure = function (targetName, commId) {
                if (kernel_1 == undefined) {
                    console.log('Kernel not found, could not connect to comm target ', targetName);
                    return { open: function () { }, send: function () { }, onMsg: function () { } };
                }
                var comm = kernel_1.connectToComm(targetName, commId);
                var sendClosure = function (data, metadata, buffers, disposeOnDone) {
                    comm.send(data, metadata, buffers, disposeOnDone);
                };
                var openClosure = function (data, metadata, buffers) {
                    comm.open(data, metadata, buffers);
                };
                var comm_proxy = {
                    set onMsg(callback) {
                        comm.onMsg = callback;
                    },
                    open: openClosure,
                    send: sendClosure
                };
                return comm_proxy;
            };
            var kernel_proxy = {
                connectToComm: connectClosure,
                registerCommTarget: registerClosure
            };
            window.HoloViews.kernels[id] = kernel_proxy;
            this._document_id = id;
            manager_1.context.session.statusChanged.connect(function (session, status) {
                if (status == "restarting" || status === "dead") {
                    delete window.HoloViews.kernels[id];
                    manager_1.comm = null;
                }
            });
        }
        return Promise.resolve().then(function () {
            if ((window.Bokeh !== undefined) && (id in window.Bokeh.index)) {
                window.HoloViews.plot_index[id] = window.Bokeh.index[id];
            }
            else {
                window.HoloViews.plot_index[id] = null;
            }
        });
    };
    HVJSExec.prototype._disposePlot = function () {
        var id = this._document_id;
        if (id !== null) {
            if (this._manager.comm !== null) {
                this._manager.comm.send({ event_type: "delete", "id": id });
            }
            if ((window.HoloViews !== undefined) && (window.HoloViews.kernels !== undefined)) {
                delete window.HoloViews.kernels[id];
            }
            if ((window.Bokeh !== undefined) && (id in window.Bokeh.index)) {
                window.Bokeh.index[id].model.document.clear();
                delete window.Bokeh.index[id];
            }
            this._document_id = null;
        }
        delete window.HoloViews.plot_index[id];
    };
    HVJSExec.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._disposePlot();
        this._manager = null;
    };
    return HVJSExec;
}(widgets_1.Widget));
exports.HVJSExec = HVJSExec;
