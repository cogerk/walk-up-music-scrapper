"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var noUiSlider = require("nouislider");
function update_widget(widget, values) {
    if (widget.hasClass("ui-slider")) {
        widget.slider('option', {
            min: 0,
            max: values.length - 1,
            dim_vals: values,
            value: 0,
            dim_labels: values
        });
        widget.slider('option', 'slide').call(widget, event, { value: 0 });
    }
    else {
        widget.empty();
        for (var i = 0; i < values.length; i++) {
            widget.append($("<option>", {
                value: i,
                text: values[i]
            }));
        }
        ;
        widget.data('values', values);
        widget.data('value', 0);
        widget.trigger("change");
    }
    ;
}
function adjustFontSize(text) {
    var width_ratio = (text.parentNode.offsetWidth / 8) / text.value.length;
    var size = Math.min(0.9, Math.max(0.6, width_ratio)) + 'em';
    text.style.fontSize = size;
}
function init_slider(id, plot_id, dim, values, next_vals, labels, dynamic, step, value, next_dim, dim_idx, delay) {
    if (delay === void 0) { delay = 500; }
    // Insert CSS
    var fileref = document.createElement("link");
    fileref.setAttribute("rel", "stylesheet");
    fileref.setAttribute("type", "text/css");
    fileref.setAttribute("href", "//cdn.bootcss.com/noUiSlider/8.5.1/nouislider.min.css");
    document.getElementsByTagName("head")[0].appendChild(fileref);
    // Compute slider parameters
    var vals = values;
    if (dynamic && vals.constructor === Array) {
        var default_value = parseFloat(value);
        var min = parseFloat(vals[0]);
        var max = parseFloat(vals[vals.length - 1]);
        var wstep = step;
        var dim_labels = [default_value];
        var init_label = default_value;
    }
    else {
        var min = 0;
        if (dynamic) {
            var max = Object.keys(vals).length - 1;
            var init_label = labels[value];
            var default_value = values[value];
        }
        else {
            var max = vals.length - 1;
            var init_label = labels[value];
            var default_value = value;
        }
        var wstep = 1;
        var dim_labels = labels;
    }
    var slider = document.getElementById('_anim_widget' + id + '_' + dim);
    var text = document.getElementById('textInput' + id + '_' + dim);
    text.value = init_label;
    adjustFontSize(text);
    // Do not display slider if there is no range
    if (min === max) {
        slider.style.display = "none";
        return;
    }
    // Set up slider
    noUiSlider.create(slider, {
        range: {
            'min': min,
            'max': max
        },
        start: [default_value],
        step: wstep
    });
    // Set up slider callback
    slider.noUiSlider.on('update', function () {
        var dim_val = slider.noUiSlider.get();
        if (dynamic) {
            if (vals.constructor === Array) {
                var label = dim_val;
                var dim_val = parseFloat(dim_val);
            }
            else {
                var label = dim_labels[parseInt(dim_val)];
                var dim_val = parseInt(dim_val);
            }
        }
        else {
            var label = dim_labels[parseInt(dim_val)];
            var dim_val = vals[parseInt(dim_val)];
        }
        text.value = label;
        adjustFontSize(text);
        if (!(plot_id in window.HoloViews.index)) {
            return;
        }
        window.HoloViews.index[plot_id].set_frame(dim_val, dim_idx);
        if (Object.keys(next_vals).length > 0) {
            var new_vals = next_vals[dim_val];
            var next_widget = document.getElementById('_anim_widget' + id + '_' + next_dim);
            update_widget(next_widget, new_vals);
        }
    });
    // Add focus and key events to slider
    var handle = slider.querySelector('.noUi-handle');
    handle.setAttribute('tabindex', 0);
    handle.addEventListener('click', function () {
        this.focus();
    });
    handle.addEventListener('keydown', function (e) {
        var value = Number(slider.noUiSlider.get());
        if (e.which === 37) {
            slider.noUiSlider.set(value - wstep);
        }
        if (e.which === 39) {
            slider.noUiSlider.set(value + wstep);
        }
    });
}
exports.init_slider = init_slider;
function init_dropdown(id, plot_id, dim, vals, value, next_vals, labels, next_dim, dim_idx, dynamic) {
    var widget = $("#_anim_widget" + id + '_' + dim);
    widget.data('values', vals);
    for (var i = 0; i < vals.length; i++) {
        if (dynamic) {
            var val = vals[i];
        }
        else {
            var val = i;
        }
        widget.append($("<option>", {
            value: val,
            text: labels[i]
        }));
    }
    ;
    widget.data("next_vals", next_vals);
    widget.val(value);
    widget.on('change', function (event, ui) {
        if (dynamic) {
            var dim_val = parseInt(this.value);
        }
        else {
            var dim_val = $.data(this, 'values')[this.value];
        }
        var next_vals = $.data(this, "next_vals");
        if (Object.keys(next_vals).length > 0) {
            var new_vals = next_vals[dim_val];
            var next_widget = $('#_anim_widget' + id + '_' + next_dim);
            update_widget(next_widget, new_vals);
        }
        var widgets = window.HoloViews.index[plot_id];
        if (widgets) {
            widgets.set_frame(dim_val, dim_idx);
        }
    });
}
exports.init_dropdown = init_dropdown;
